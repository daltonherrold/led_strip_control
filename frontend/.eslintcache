[{"/home/pi/led/frontend/src/index.js":"1","/home/pi/led/frontend/src/reportWebVitals.js":"2","/home/pi/led/frontend/src/App.js":"3","/home/pi/led/frontend/src/components/LedControl.js":"4"},{"size":500,"mtime":1609792359658,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1609792359668,"results":"7","hashOfConfig":"6"},{"size":527,"mtime":1609801811983,"results":"8","hashOfConfig":"6"},{"size":10211,"mtime":1609802716581,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"gya738",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/pi/led/frontend/src/index.js",[],["20","21"],"/home/pi/led/frontend/src/reportWebVitals.js",[],"/home/pi/led/frontend/src/App.js",[],"/home/pi/led/frontend/src/components/LedControl.js",["22","23"],"import React from 'react';\nimport { NativeSelect, InputLabel, Switch, Slider } from '@material-ui/core';\nimport { ChromePicker } from 'react-color';\n\n\nclass LedControl extends React.Component {\n  \n  constructor() {\n    super();\n\n    this.state = {\n      colorValue: {r: 255, g: 10, b: 10},\n      style: \"\",\n      kwargs: {\n        red: 255,\n        green: 10,\n        blue: 10,\n        brightness: 1,\n        speed: 10,\n        reverse: false,\n        animation: \"instant\",\n        animation_speed: 20,\n        step: 1,\n      },\n      isLoading: true,\n      error: null\n    }\n\n    this.effects = {\n      \"staticColor\": {\n        prettyName: \"Static Color\",\n        speed: false,\n        reverse: false,\n        animation: true,\n        rgb: true,\n        brightness: true,\n        animation_speed: true,\n        step: false,\n      },\n      \"rainbowCycle\": {\n        prettyName: \"Rainbow Cycle\",\n        speed: true,\n        reverse: true,\n        animation: false,\n        rgb: false,\n        brightness: true,\n        animation_speed: false,\n        step: false,\n      },\n      \"rainbowBreathing\": {\n        prettyName: \"Rainbow Breathing\",\n        speed: true,\n        reverse: true,\n        animation: true,\n        rgb: false,\n        brightness: true,\n        animation_speed: true,\n        step: true,\n      }\n    }\n\n    this.animations = {\n      \"instant\": \"Instant\",\n      \"colorWipe\": \"Color Wipe\",\n      \"colorWipeTwoSided\": \"Color Wipe Two Sided\"\n    }\n\n    this.post = this.post.bind(this)\n    this.changeStyle = this.changeStyle.bind(this)\n    this.changeAnimation = this.changeAnimation.bind(this)\n    this.changeBrightness = this.changeBrightness.bind(this)\n    this.changeSpeed = this.changeSpeed.bind(this)\n    this.changeAnimationSpeed = this.changeAnimationSpeed.bind(this)\n    this.changeStep = this.changeStep.bind(this)\n    this.changeReverse = this.changeReverse.bind(this)\n    this.changeColor = this.changeColor.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n\n  }\n\n  async componentDidMount() {\n    try {\n      fetch('http://192.168.1.214:5000/get_lights')\n        .then(res => res.json())\n        .then(data => {\n          console.log(data);\n          this.setState({ style: data.style, kwargs: data.kwargs, isLoading: false },\n            () => {\n              this.state.colorValue = {r: this.state.kwargs.red, g: this.state.kwargs.green, b: this.state.kwargs.blue}\n            });\n        })\n    } catch (error) {\n      this.setState({ error: error.message, isLoading: false });\n    }\n  }\n\n  changeStyle(event) {\n    this.setState({\n      style: event.target.value\n    }, () => {\n      this.post();\n    });\n  }\n\n  changeAnimation(event) {\n    this.setState({\n      kwargs: { ...this.state.kwargs, animation: event.target.value}\n    }, () => {\n      this.post();\n    });\n  }\n\n  changeBrightness(_, newValue) {\n    this.setState({\n      kwargs: { ...this.state.kwargs, brightness: newValue}\n    }, () => {\n      this.post();\n    });\n  }\n\n  changeSpeed(_, newValue) {\n    this.setState({\n      kwargs: { ...this.state.kwargs, speed: newValue}\n    }, () => {\n      this.post();\n    });\n  }\n\n  changeAnimationSpeed(_, newValue) {\n    this.setState({\n      kwargs: { ...this.state.kwargs, animation_speed: newValue}\n    }, () => {\n      this.post();\n    });\n  }\n\n  changeStep(_, newValue) {\n    this.setState({\n      kwargs: { ...this.state.kwargs, step: newValue}\n    }, () => {\n      this.post();\n    });\n  }\n\n  changeReverse(event) {\n    this.setState({\n      kwargs: { ...this.state.kwargs, reverse: event.target.checked}\n    }, () => {\n      this.post();\n    });\n  }\n\n  changeColor(color) {\n    this.setState({\n      kwargs: { ...this.state.kwargs, red: color.rgb.r, green: color.rgb.g, blue: color.rgb.b}\n    }, () => {\n      this.post();\n    });\n  }\n\n  handleChange(color) {\n    this.setState({\n      colorValue: color.rgb\n    })\n  }\n  \n\n\n  post() {\n    fetch('http://192.168.1.214:5000/change_lights', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        style: this.state.style,\n        kwargs: this.state.kwargs,\n      })\n    }).then(response => {\n      console.log(response)\n  })\n  }\n\n  renderLed = () => {\n    const { style, kwargs, isLoading, error } = this.state;\n\n    if (error) {\n      return <div>{error}</div>;\n    }\n\n    if (isLoading) {\n      return <div>Loading...</div>;\n    }\n\n    return  (\n      <form>\n        <div class=\"row row-space\">\n          <div class=\"col\">\n            <div class=\"input-group\">\n              <label class=\"label\">Effect</label>\n              <div class=\"w-100\">\n                <NativeSelect id=\"select1\" value={style} onChange={this.changeStyle}>\n                  {Object.keys(this.effects).map(effect =>\n                  <option value={effect}>{this.effects[effect].prettyName}</option>\n                  )}\n                </NativeSelect>\n              </div>\n            </div>\n          </div>\n        </div>\n        {(() => {\n        if (this.effects[style].animation) {\n          return (\n            <div class=\"row row-space\">\n              <div class=\"col\">\n                <div class=\"input-group\">\n                  <label class=\"label\">Animation</label>\n                  <div class=\"w-100\">\n                    <NativeSelect id=\"select2\" value={kwargs.animation} onChange={this.changeAnimation}>\n                      {Object.keys(this.animations).map(animation =>\n                      <option value={animation}>{this.animations[animation]}</option>\n                      )}\n                    </NativeSelect>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        }\n      })()}\n      {(() => {\n        if (this.effects[style].brightness) {\n          return (\n            <div class=\"row row-space\">\n              <div class=\"col\">\n                <div class=\"mb-1 input-group\">\n                  <label class=\"label\">Brightness</label>\n                  <div class=\"w-100\">\n                    <Slider\n                      onChangeCommitted={this.changeBrightness}\n                      defaultValue={kwargs.brightness}\n                      aria-labelledby=\"brightness_slider\"\n                      step={0.01}\n                      min={0}\n                      max={1}\n                      valueLabelDisplay=\"auto\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        }\n      })()}\n      {(() => {\n        if (this.effects[style].rgb) {\n          return (\n            <div class=\"row row-space\">\n              <div class=\"col\">\n                <div class=\"input-group\">\n                  <label class=\"label\">Color</label>\n                  <div class=\"w-100\">\n                    <ChromePicker\n                      color={ this.state.colorValue} \n                      onChange={ this.handleChange }\n                      onChangeComplete={ this.changeColor }\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        }\n      })()}\n      {(() => {\n        if (this.effects[style].speed) {\n          return (\n            <div class=\"row row-space\">\n              <div class=\"col\">\n                <div class=\"input-group\">\n                  <label class=\"label\">Speed</label>\n                  <div class=\"w-100\">\n                    <Slider\n                      onChangeCommitted={this.changeSpeed}\n                      defaultValue={kwargs.speed}\n                      aria-labelledby=\"speed_slider\"\n                      step={1}\n                      min={0}\n                      max={100}\n                      valueLabelDisplay=\"auto\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        }\n      })()}\n      {(() => {\n        if (this.effects[style].animation_speed && this.state.kwargs.animation != \"instant\") {\n          return (\n            <div class=\"row row-space\">\n              <div class=\"col\">\n                <div class=\"input-group\">\n                  <label class=\"label\">Animation Speed</label>\n                  <div class=\"w-100\">\n                    <Slider\n                      onChangeCommitted={this.changeAnimationSpeed}\n                      defaultValue={kwargs.animation_speed}\n                      aria-labelledby=\"animation_speed_slider\"\n                      step={1}\n                      min={0}\n                      max={100}\n                      valueLabelDisplay=\"auto\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        }\n      })()}\n      {(() => {\n        if (this.effects[style].step) {\n          return (\n            <div class=\"row row-space\">\n              <div class=\"col\">\n                <div class=\"input-group\">\n                  <label class=\"label\">Step</label>\n                  <div class=\"w-100\">\n                    <Slider\n                      onChangeCommitted={this.changeStep}\n                      defaultValue={kwargs.step}\n                      aria-labelledby=\"step_slider\"\n                      step={1}\n                      min={1}\n                      max={100}\n                      valueLabelDisplay=\"auto\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        }\n      })()}\n      {(() => {\n        if (this.effects[style].reverse) {\n          return (\n            <div class=\"row row-space\">\n              <div class=\"col\">\n                <div class=\"input-group\">\n                  <label class=\"label\">Reverse</label>\n                  <div class=\"w-100\">\n                    <Switch\n                      checked={kwargs.reverse}\n                      onChange={this.changeReverse}\n                      color=\"Primary\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        }\n      })()}\n      \n      </form>\n    );\n  };\n  \n  render() {\n    return <div>{this.renderLed()}</div>;\n  }\n  \n}\n\nexport default LedControl;\n\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":2,"column":24,"nodeType":"30","messageId":"31","endLine":2,"endColumn":34},{"ruleId":"32","severity":1,"message":"33","line":300,"column":80,"nodeType":"34","messageId":"35","endLine":300,"endColumn":82},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'InputLabel' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]